<?xml version="1.0" encoding="UTF-8"?>

<project name="transactions-jta" default="build-module">
<!-- MAKE SURE THAT THE PROJECT NAME REFLECTS THE MODULE FOLDER NAME!!! -->
    
   <!-- import the module template build file with the default properties and targets -->
   <import file="../../resources/build-module-template.xml"/>
   
   
    <!-- by default, the target jar file is named after the module -->
    <property name="current.module.jar.file.name" value="${ant.project.name}" />
    
    <property name="current.module.osgi.symbolic.name" value="com.atomikos.${current.module.jar.file.name}"/>
    
    <path id="classpath">
           <fileset dir="${lib.dir}">
               <include name="junit-3.8.1.jar"/>
               <include name="jndi.jar"/>
               <include name="jms.jar"/>
               <include name="jmx.jar"/>
               <include name="jta.jar"/>
               <include name="jca.jar"/>
           </fileset>
           <path refid="baseclasspath" />
    </path>
    
    
    <target name="compile-module">
        <echo>Compiling module with DEBUG flag set to: ${debug}</echo>
        <javac source="1.4" target="1.4" srcdir="${current.module.dir}/src" includes="**/*.java" 
                destdir="${current.module.classes.dir}" 
                debug="${debug}">
            <classpath refid="classpath"/>
        </javac>
        
  

    </target>
    <!--
    <path id="obfuscateclasspath">
        <path refid="build.utilities.classpath"/>
        <path refid="classpath"/>
    </path>

    
    <target name="obfuscate-module">
        
        <xslt style="${global.resource.dir}/retroguard.xsl" 
              in="${current.module.dir}/resources/javadoc.xml" 
              out="${current.module.build.dir}/retroguard.rgs" >  
            
        </xslt>
        
       
        <java classname="RetroGuard">
            <classpath refid="obfuscateclasspath"/>
            <arg value="${jars.dir}/${current.module.jar.file.name}"/>
            <arg value="${current.module.build.dir}/obfuscated.jar"/>
            <arg value="${current.module.build.dir}/retroguard.rgs"/>
            <arg value="${obfuscate.reports.dir}/transactions-retroguard.txt"/>
        </java>
        
        
        <move file="${current.module.build.dir}/obfuscated.jar" tofile="${jars.dir}/${current.module.jar.file.name}" />
        
    </target>
    -->
    
    <!-- Overrides default testing to avoid case 27230 -->
    <target name="test-module" description="tests the module">
        <antcall target="build-with-tests-module"/>
        <!-- instrument the compiled class files for COBERTURA coverage reporting -->
        <!-- <cobertura-instrument todir="${current.module.instrumented.classes.dir}" datafile="${testcoverage.data.file}">
            <fileset dir="${current.module.classes.dir}">
                <include name="**/*.class"/>
            </fileset>
        </cobertura-instrument>
        -->
        <cobertura-instrument todir="${test.classes.dir}" datafile="${testcoverage.data.file}">
            <fileset dir="${current.module.classes.dir}">
                <include name="**/*.class"/>
                <exclude name="**/*Stub.class"/>
                <exclude name="**/*Skel.class"/>
                <exclude name="**/*Skeleton.class"/>
                <exclude name="**/*Tie.class"/>
            </fileset>
        </cobertura-instrument>
        
        <!-- compile the tests to the GLOBAL test dir so that inter-module test dependencies are easy 
        <javac srcdir="${current.module.dir}/test" includes="**/*.java" destdir="${test.classes.dir}">
            <classpath refid="testclasspath"/>
        </javac>
        -->
        
        <!-- run all tests and write output to reports dir -->
        <!-- supply lots of RAM and no outputtoformatters to avoid case 27230 -->
        <junit dir="${current.module.build.dir}" fork="yes" maxmemory="1024M" outputtoformatters="false">
            <sysproperty key="net.sourceforge.cobertura.datafile"
                file="${testcoverage.data.file}" />
            <formatter type="xml"/>
            <!-- <classpath location="${current.module.instrumented.classes.dir}"/> -->
            <classpath refid="testclasspath"/>
            <batchtest todir="${test.reports.dir}">
               <fileset dir="${current.module.dir}/test">
                   <include name="**/*JUnit.java"/>
               </fileset>
            </batchtest>
        </junit>       
    </target>
    
    <target name="javadoc-module">
        <!-- ignore if not relevant -->
        <!-- any generated javadoc sources should go into ${javadoc.src.dir} -->
        
        <!-- generate list of .java files to include in Javadoc -->
        <xslt style="${global.resource.dir}/javadoc.xsl" 
              in="${current.module.dir}/resources/javadoc.xml" 
              out="${current.module.build.dir}/javadoc_files.txt" >             
        </xslt>
         
        <!-- load the list of files as a property -->
         <loadfile
              property="javadoc.files"
              srcfile="${current.module.build.dir}/javadoc_files.txt"
              failonerror="true">
         </loadfile>
         
         <!-- copy all files to a separate dir for javadoc -->         
         <copy todir="${javadoc.src.dir}">        
             <fileset dir="${current.module.dir}/src" includes="${javadoc.files}"/>
         </copy>
    </target>
    
    <target name="create-license">
       <!-- COMMENTED OUT: NO LONGER NEEDED
        <property file="${release.version.file}"/>
        <java fork="yes" classname="com.atomikos.vendor.CreateLicense" classpathref="classpath">          
            <arg value="AtomikosLicenseKey" />
            <arg value="Transactions"/>
            <arg value="license"/>
            <arg value="${release.version}"/>
            <arg value="developer"/>
        </java>
        <jar destfile="${jars.dir}/license.jar">
            <fileset dir="${current.module.dir}" includes="license.*"/>            
        </jar>
        <delete>
            <fileset dir="${current.module.dir}" includes="license.*" />
        </delete>
        -->
    </target>
    
</project>
